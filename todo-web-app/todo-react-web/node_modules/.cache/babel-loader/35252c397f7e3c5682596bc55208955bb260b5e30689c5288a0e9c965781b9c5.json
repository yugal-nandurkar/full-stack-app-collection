{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\desk\\\\Documents\\\\Projects\\\\test\\\\01-frontend\\\\todo-app\\\\src\\\\components\\\\todo\\\\security\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider(_ref) {\n  _s2();\n  let {\n    children\n  } = _ref;\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n\n  // function login(username, password) {\n  //     if(username==='in28minutes' && password==='dummy'){\n  //         setAuthenticated(true)\n  //         setUsername(username)\n  //         return true            \n  //     } else {\n  //         setAuthenticated(false)\n  //         setUsername(null)\n  //         return false\n  //     }        \n  // }\n\n  // async function login(username, password) {\n\n  //     const baToken = 'Basic ' + window.btoa( username + \":\" + password )\n\n  //     try {\n\n  //         const response = await executeBasicAuthenticationService(baToken)\n\n  //         if(response.status==200){\n  //             setAuthenticated(true)\n  //             setUsername(username)\n  //             setToken(baToken)\n\n  //             apiClient.interceptors.request.use(\n  //                 (config) => {\n  //                     console.log('intercepting and adding a token')\n  //                     config.headers.Authorization = baToken\n  //                     return config\n  //                 }\n  //             )\n\n  //             return true            \n  //         } else {\n  //             logout()\n  //             return false\n  //         }    \n  //     } catch(error) {\n  //         logout()\n  //         return false\n  //     }\n  // }\n\n  async function login(username, password) {\n    try {\n      const response = await executeJwtAuthenticationService(username, password);\n      if (response.status == 200) {\n        const jwtToken = 'Bearer ' + response.data.token;\n        setAuthenticated(true);\n        setUsername(username);\n        setToken(jwtToken);\n        apiClient.interceptors.request.use(config => {\n          console.log('intercepting and adding a token');\n          config.headers.Authorization = jwtToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  function logout() {\n    setAuthenticated(false);\n    setToken(null);\n    setUsername(null);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username,\n      token\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"TN8WqXx3uVoSLaFezWMtgn1oPEU=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","apiClient","executeJwtAuthenticationService","AuthContext","useAuth","AuthProvider","children","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","login","password","response","status","jwtToken","data","interceptors","request","use","config","console","log","headers","Authorization","logout","error"],"sources":["C:/Users/desk/Documents/Projects/test/01-frontend/todo-app/src/components/todo/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\n//1: Create a Context\nexport const AuthContext = createContext()\n\nexport const useAuth = () => useContext(AuthContext)\n\n//2: Share the created context with other components\nexport default function AuthProvider({ children }) {\n\n    //3: Put some state in the context\n    const [isAuthenticated, setAuthenticated] = useState(false)\n\n    const [username, setUsername] = useState(null)\n\n    const [token, setToken] = useState(null)\n\n    // function login(username, password) {\n    //     if(username==='in28minutes' && password==='dummy'){\n    //         setAuthenticated(true)\n    //         setUsername(username)\n    //         return true            \n    //     } else {\n    //         setAuthenticated(false)\n    //         setUsername(null)\n    //         return false\n    //     }        \n    // }\n\n    // async function login(username, password) {\n\n    //     const baToken = 'Basic ' + window.btoa( username + \":\" + password )\n\n    //     try {\n\n    //         const response = await executeBasicAuthenticationService(baToken)\n\n    //         if(response.status==200){\n    //             setAuthenticated(true)\n    //             setUsername(username)\n    //             setToken(baToken)\n\n    //             apiClient.interceptors.request.use(\n    //                 (config) => {\n    //                     console.log('intercepting and adding a token')\n    //                     config.headers.Authorization = baToken\n    //                     return config\n    //                 }\n    //             )\n\n    //             return true            \n    //         } else {\n    //             logout()\n    //             return false\n    //         }    \n    //     } catch(error) {\n    //         logout()\n    //         return false\n    //     }\n    // }\n\n\n    async function login(username, password) {\n\n        try {\n\n            const response = await executeJwtAuthenticationService(username, password)\n\n            if(response.status==200){\n                \n                const jwtToken = 'Bearer ' + response.data.token\n                \n                setAuthenticated(true)\n                setUsername(username)\n                setToken(jwtToken)\n\n                apiClient.interceptors.request.use(\n                    (config) => {\n                        console.log('intercepting and adding a token')\n                        config.headers.Authorization = jwtToken\n                        return config\n                    }\n                )\n\n                return true            \n            } else {\n                logout()\n                return false\n            }    \n        } catch(error) {\n            logout()\n            return false\n        }\n    }\n\n\n    function logout() {\n        setAuthenticated(false)\n        setToken(null)\n        setUsername(null)\n    }\n\n    return (\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username, token}  }>\n            {children}\n        </AuthContext.Provider>\n    )\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,+BAA+B,QAAQ,iCAAiC;;AAEjF;AAAA;AACA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,EAAE;AAE1C,OAAO,MAAMM,OAAO,GAAG;EAAA;EAAA,OAAML,UAAU,CAACI,WAAW,CAAC;AAAA;;AAEpD;AAAA,GAFaC,OAAO;AAGpB,eAAe,SAASC,YAAY,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAE7C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,eAAea,KAAK,CAACJ,QAAQ,EAAEK,QAAQ,EAAE;IAErC,IAAI;MAEA,MAAMC,QAAQ,GAAG,MAAMb,+BAA+B,CAACO,QAAQ,EAAEK,QAAQ,CAAC;MAE1E,IAAGC,QAAQ,CAACC,MAAM,IAAE,GAAG,EAAC;QAEpB,MAAMC,QAAQ,GAAG,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAACP,KAAK;QAEhDH,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrBG,QAAQ,CAACK,QAAQ,CAAC;QAElBhB,SAAS,CAACkB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;UACRC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9CF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGT,QAAQ;UACvC,OAAOK,MAAM;QACjB,CAAC,CACJ;QAED,OAAO,IAAI;MACf,CAAC,MAAM;QACHK,MAAM,EAAE;QACR,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAMC,KAAK,EAAE;MACXD,MAAM,EAAE;MACR,OAAO,KAAK;IAChB;EACJ;EAGA,SAASA,MAAM,GAAG;IACdnB,gBAAgB,CAAC,KAAK,CAAC;IACvBI,QAAQ,CAAC,IAAI,CAAC;IACdF,WAAW,CAAC,IAAI,CAAC;EACrB;EAEA,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAG;MAACH,eAAe;MAAEM,KAAK;MAAEc,MAAM;MAAElB,QAAQ;MAAEE;IAAK,CAAI;IAAA,UAC7EL;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE/B;AAAC,IAnGuBD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}